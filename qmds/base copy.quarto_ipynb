{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Base completa SEMOB\"\n",
        "format:\n",
        "    html:\n",
        "        page-layout: custom\n",
        "        toc: false\n",
        "css: /index.css\n",
        "---"
      ],
      "id": "dbc173e6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: importação da base de dados\n",
        "#| eval: false\n",
        "#| echo: false\n",
        "# Automatizando e simplificando a importação da base\n",
        "\n",
        "import os\n",
        "from dotenv import load_dotenv\n",
        "from sqlalchemy import create_engine\n",
        "import pandas as pd\n",
        "import datetime\n",
        "\n",
        "# Carregar as variáveis do arquivo .env\n",
        "load_dotenv(\"/Users/ramson./Documents/_Projetos/semob-mcid.github.io/config.env\")\n",
        "\n",
        "# Obter as credenciais do banco de dados\n",
        "DB_HOST = os.getenv('DB_HOST')\n",
        "DB_PORT = os.getenv('DB_PORT', '5432')  # Porta padrão 5432\n",
        "DB_NAME = os.getenv('DB_NAME')\n",
        "DB_USER = os.getenv('DB_USER')\n",
        "DB_PASSWORD = os.getenv('DB_PASSWORD')\n",
        "\n",
        "# Criar a string de conexão com o banco de dados PostgreSQL\n",
        "DATABASE_URL = f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}'\n",
        "\n",
        "# Criar a engine do SQLAlchemy\n",
        "engine = create_engine(DATABASE_URL)\n",
        "\n",
        "# Defina o schema e a tabela\n",
        "schema_name = 'semob'\n",
        "table_name = 'base2023_completa'\n",
        "\n",
        "# Caminho do arquivo Parquet\n",
        "parquet_file_path = 'qmds/base.parquet'\n",
        "\n",
        "# Obter a data atual\n",
        "today = datetime.date.today()\n",
        "\n",
        "# Verificar se o arquivo existe e foi criado hoje\n",
        "def is_file_created_today(file_path):\n",
        "    if os.path.exists(file_path):\n",
        "        # Obter a data de criação ou última modificação\n",
        "        creation_time = os.path.getctime(file_path)\n",
        "        creation_date = datetime.date.fromtimestamp(creation_time)\n",
        "        return creation_date == today\n",
        "    return False\n",
        "\n",
        "# Lógica para verificar e usar ou recriar o arquivo Parquet\n",
        "if is_file_created_today(parquet_file_path):\n",
        "    print(\"Arquivo Parquet encontrado e criado hoje. Carregando a base do arquivo.\")\n",
        "    # Carregar o arquivo Parquet em um DataFrame\n",
        "    base = pd.read_parquet(parquet_file_path, engine='pyarrow')  # Ou 'fastparquet'\n",
        "else:\n",
        "    print(\"Arquivo Parquet inexistente ou desatualizado. Acessando o banco de dados.\")\n",
        "    # Criar o diretório se não existir\n",
        "    os.makedirs(os.path.dirname(parquet_file_path), exist_ok=True)\n",
        "    \n",
        "    # Criar a query SQL\n",
        "    query = f\"\"\"\n",
        "    SELECT * FROM {schema_name}.{table_name};\n",
        "    \"\"\"\n",
        "    \n",
        "    # Executar a query e carregar o resultado em um DataFrame\n",
        "    base = pd.read_sql_query(query, con=engine)\n",
        "    \n",
        "    # Salvar o DataFrame em um arquivo Parquet\n",
        "    base.to_parquet(parquet_file_path, engine='pyarrow')\n",
        "    print(f\"Base salva como arquivo Parquet em: {parquet_file_path}\")\n",
        "\n",
        "df = base.query('bln_ativo_semob == \"SIM\"')\n",
        "base_inativos_semob = base.query('bln_ativo_semob == \"NAO\"')\n",
        "# Exibir as primeiras linhas da base\n",
        "#print(df.head())"
      ],
      "id": "importacao-da-base-de-dados",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| eval: false\n",
        "from datetime import datetime"
      ],
      "id": "4abe4164",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip title=\"Data de atualização\" collapse=\"false\"}\n",
        "Atualizado em: `{python} datetime.today().strftime('%d/%m/%Y')`\n",
        ":::\n"
      ],
      "id": "9dfab60e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| eval: false\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Nome do arquivo\n",
        "arquivo = \"base_semob_inativos.csv\"\n",
        "\n",
        "# Lê o arquivo CSV e salva como um DataFrame\n",
        "df = pd.read_csv(arquivo, sep=';') #,header=1  , skiprows=1\n",
        "\n",
        "df = df.head(1000)\n",
        "# Exibe as primeiras linhas do DataFrame\n",
        "#print(df.head())"
      ],
      "id": "40543755",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Preparação da tabela\n",
        "#| echo: false\n",
        "#| eval: false\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Função para limpar e converter valores monetários\n",
        "def clean_and_convert(column):\n",
        "    return pd.to_numeric(\n",
        "        column.str.replace('.', '', regex=False).str.replace(',', '.', regex=False),\n",
        "        errors='coerce'\n",
        "    )\n",
        "\n",
        "# Obtém a data de hoje no formato desejado\n",
        "data_hoje = datetime.today().strftime('%Y%m%d')\n",
        "\n",
        "# Lista de colunas a serem processadas\n",
        "colunas_monetarias = []\n",
        "\n",
        "colunas_texto = []\n",
        "\n",
        "colunas_boleanas = []\n",
        "\n",
        "colunas_data = []\n"
      ],
      "id": "Preparacao-da-tabela",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: content-block\n"
      ],
      "id": "14b8d30e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| eval: false\n",
        "import itables.options as opt\n",
        "from itables import init_notebook_mode, show\n",
        "from itables.downsample import as_nbytes, nbytes\n",
        "from itables.sample_dfs import get_indicators\n",
        "from itables import JavascriptCode\n",
        "from datetime import datetime\n",
        "import locale\n",
        "\n",
        "# Definir o local para o Brasil\n",
        "locale.setlocale(locale.LC_NUMERIC, 'pt_BR.UTF-8')\n",
        "\n",
        "init_notebook_mode(all_interactive=True)\n",
        "\n",
        "#opt.column_filters = 'footer'\n",
        "#opt.columnDefs = [{\"className\": \"dt-center\", \"targets\": \"_all\"}]\n",
        "opt.showIndex = False\n",
        "opt.lengthMenu = [ 20, 50, 100, 200, 500]\n",
        "opt.maxBytes = \"5MB\"\n",
        "\n",
        "# Função para limpar e converter valores monetários\n",
        "def clean_and_convert(column):\n",
        "    return pd.to_numeric(\n",
        "        column.str.replace('.', '', regex=False).str.replace(',', '.', regex=False),\n",
        "        errors='coerce'\n",
        "    )\n",
        "\n",
        "# Obtém a data de hoje no formato desejado\n",
        "data_hoje = datetime.today().strftime('%Y%m%d')\n",
        "\n",
        "# Exibir com o símbolo de porcentagem\n",
        "#df['Execução (%)'] = df['Execução (%)'].apply(lambda x: f\"{x:.2f}%\")\n",
        "\n",
        "# Lista de colunas a serem processadas\n",
        "colunas_monetarias = ['Valor de Repasse/Empréstimo','Valor Empenhado', 'Valor Desbloqueado', 'Valor Liberado']\n",
        "\n",
        "df['Município'] = df['Município'].str.title()\n",
        "\n",
        "# Limpar e converter as colunas\n",
        "df[colunas_monetarias] = df[colunas_monetarias].apply(clean_and_convert)\n",
        "\n",
        "# Formatar os valores monetários e de porcentagem com 2 casas decimais\n",
        "df[colunas_monetarias] = df[colunas_monetarias].map(lambda x: f\"{x:,.2f}\" if pd.notnull(x) else \"\")\n",
        "\n",
        "# Passo 1: Substituir vírgulas por pontos e converter para numérico\n",
        "df['Execução (%)'] = df['Execução (%)'].str.replace(',', '.', regex=False)\n",
        "df['Execução (%)'] = pd.to_numeric(df['Execução (%)'], errors='coerce')\n",
        "\n",
        "# Passo 2: Multiplicar por 100\n",
        "df['Execução (%)'] = df['Execução (%)'] * 100\n",
        "\n",
        "\n",
        "# Ordena o DataFrame por 'coluna1' e 'coluna2'\n",
        "df = df.sort_values(by=[ 'Unidade Federativa','Município','Contrato'])\n",
        "\n",
        "df = df.reset_index(drop=True)\n",
        "\n",
        "# Renomear uma coluna\n",
        "df.rename(columns={\"Unidade Federativa\": \"UF\"}, inplace=True)\n",
        "\n",
        "show(\n",
        "    df,  # Exibe o DataFrame 'df' utilizando a função 'show' para renderização interativa na interface.\n",
        "    #footer=True,  # A linha de rodapé (footer) está comentada, mas se fosse ativada, exibiria informações adicionais no rodapé da tabela.\n",
        "    classes=\"display nowrap cell-border\",  # Define classes CSS para estilização da tabela: 'display' para exibição padrão, 'nowrap' para evitar quebra de linha nas células e 'cell-border' para adicionar bordas nas células.\n",
        "    language={\"url\": \"https://cdn.datatables.net/plug-ins/2.0.2/i18n/pt-BR.json\"},  # Define o idioma da tabela como português do Brasil, utilizando um arquivo de tradução hospedado online.\n",
        "    select=True,  # Habilita a seleção de linhas na tabela.\n",
        "    keys=True,  # Permite a navegação entre as linhas utilizando teclas de direção do teclado.\n",
        "    buttons=[  # Define os botões adicionais na interface da tabela.\n",
        "        \"pageLength\",  # Adiciona o botão de seleção de quantidade de páginas (número de registros exibidos por página).\n",
        "        {\n",
        "            \"extend\": \"colvis\",  # Botão de visibilidade das colunas.\n",
        "            \"collectionLayout\": \"fixed columns\",  # Layout do menu de visibilidade das colunas será fixo (não se move).\n",
        "            \"popoverTitle\": \"Quais colunas você quer que apareça?\"  # Título do popover que aparece quando o botão de visibilidade é acionado.\n",
        "        },\n",
        "        {\n",
        "            \"extend\": \"excelHtml5\",  # Botão para exportar os dados da tabela para um arquivo Excel.\n",
        "            \"title\": f\"{data_hoje}_base_semob\",  # O nome do arquivo exportado será composto pela data atual e o prefixo 'base_semob'.\n",
        "            \"exportOptions\": {\"columns\": \":visible\"}  # Apenas as colunas visíveis serão exportadas para o Excel.\n",
        "        }\n",
        "    ],\n",
        "    layout={\"top1\": \"searchPanes\"},  # Define o layout da tabela, no qual a área de pesquisa ('searchPanes') será posicionada na parte superior.\n",
        "    searchPanes={\"layout\": \"columns-4\", \"cascadePanes\": True, \"columns-4\": [ 1, 2, 4, 9]\n",
        "    },  # Configura o painel de pesquisa para ser exibido em 4 colunas, permitindo que os filtros sejam aplicados de forma cascata nas colunas 1, 2, 4 e 9.\n",
        "    columnDefs=[  # Define propriedades específicas para as colunas da tabela.\n",
        "        {\"targets\": 5, \"title\": \"Valor Repasse/<br>Empréstimo\"},  # Altera o título da coluna 5, com a adição de uma quebra de linha HTML no título.\n",
        "        {\"targets\": 3, \"visible\": False},  # Torna a coluna 3 invisível.\n",
        "        {\"width\": \"100px\", \"targets\": \"_all\"},  # Define a largura de todas as colunas como 100px.\n",
        "        {\"className\": \"dt-center\", \"targets\": [1,2,4,9]},  # Aplica a classe CSS 'dt-center' para centralizar o conteúdo das colunas 0, 1, 2, 4 e 9.\n",
        "        {\"className\": \"dt-left\", \"targets\": [3]},  # Aplica a classe CSS 'dt-left' para alinhar à esquerda o conteúdo da coluna 3.\n",
        "        {\"className\": \"dt-right\", \"targets\": [5,6,7,8,10]}  # Aplica a classe CSS 'dt-right' para alinhar à direita o conteúdo das colunas 5, 6, 7, 8 e 10.\n",
        "    ],\n",
        "    style=\"width:900px\",  # Define o estilo de largura para a tabela, ajustando a largura total para 900px.\n",
        "    autoWidth=False  # Desativa a largura automática das colunas, permitindo que a largura de cada coluna seja definida manualmente.\n",
        ")\n"
      ],
      "id": "42699739",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "025b3e61"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/ramson./Documents/_Projetos/semob-mcid.github.io/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}