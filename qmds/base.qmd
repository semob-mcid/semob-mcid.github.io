
---
title: "Base Ativos SEMOB"
format:
    html:
        page-layout: custom
        toc: false
css: /index.css
---



```{python}
#| label: importação da base de dados
#| eval: true
#| echo: false
# Automatizando e simplificando a importação da base

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
import pandas as pd
import datetime

# Carregar as variáveis do arquivo .env
load_dotenv("/Users/ramson./Documents/_Projetos/semob-mcid.github.io/config.env")

# Obter as credenciais do banco de dados
DB_HOST = os.getenv('DB_HOST')
DB_PORT = os.getenv('DB_PORT', '5432')  # Porta padrão 5432
DB_NAME = os.getenv('DB_NAME')
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')

# Criar a string de conexão com o banco de dados PostgreSQL
DATABASE_URL = f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}'

# Criar a engine do SQLAlchemy
engine = create_engine(DATABASE_URL)

# Defina o schema e a tabela
schema_name = 'mcid_carteira_investimento'
table_name = 'tab_carteira_investimento_mcid tci'

# Caminho do arquivo Parquet
parquet_file_path = 'qmds/tci.parquet'

# Obter a data atual
today = datetime.date.today()

# Verificar se o arquivo existe e foi criado hoje
def is_file_created_today(file_path):
    if os.path.exists(file_path):
        # Obter a data de criação ou última modificação
        creation_time = os.path.getctime(file_path)
        creation_date = datetime.date.fromtimestamp(creation_time)
        return creation_date == today
    return False

# Lógica para verificar e usar ou recriar o arquivo Parquet
if is_file_created_today(parquet_file_path):
    #print("Arquivo Parquet encontrado e criado hoje. Carregando a base do arquivo.")
    
    # Carregar o arquivo Parquet em um DataFrame
    tci = pd.read_parquet(parquet_file_path, engine='pyarrow')  # Ou 'fastparquet'
else:
    #print("Arquivo Parquet inexistente ou desatualizado. Acessando o banco de dados.")
    # Criar o diretório se não existir
    os.makedirs(os.path.dirname(parquet_file_path), exist_ok=True)
    
    # Criar a query SQL
    query = f"""
    SELECT * FROM {schema_name}.{table_name};
    """
    
    # Executar a query e carregar o resultado em um DataFrame
    tci = pd.read_sql_query(query, con=engine)
    
    # Salvar o DataFrame em um arquivo Parquet
    tci.to_parquet(parquet_file_path, engine='pyarrow')
    print(f"Base salva como arquivo Parquet em: {parquet_file_path}")

df = tci.query('bln_carteira_ativa_mcid == "SIM" and txt_sigla_secretaria == "SEMOB"')
base_inativos_semob = tci.query('bln_carteira_ativa_mcid != "SIM" and txt_sigla_secretaria == "SEMOB"')
# Exibir as primeiras linhas da base
#print(df.head())

df = df[['cod_tci','num_convenio','cod_proposta','num_proposta','cod_contrato','bln_carga_legado_tci','cod_cipi_projeto_invest','cod_cipi_intervencao','id_governa','num_generico_contrato','txt_origem','txt_uf','txt_regiao','cod_ibge_6dig','cod_ibge_7dig','txt_municipio','txt_tipo_instrumento','dsc_objeto_instrumento','dsc_concedente','txt_sigla_secretaria','bln_pac','dsc_fase_pac','txt_tomador','cnpj_agente_financeiro','txt_agente_financeiro','num_ano_instrumento','dte_assinatura_contrato','dte_fim_contrato','dte_inicio_obra','dte_fim_obra','bln_carteira_mcid','bln_carteira_ativa_mcid','bln_carteira_andamento','dsc_situacao_contrato_mcid','dsc_situacao_objeto_mcid','txt_motivo_paralisacao_mcid','txt_principal_motivo_paralisacao','dsc_detalhamento_motivo_paralisacao','dsc_motivo_paralisacao','dte_paralisacao','dsc_fonte','txt_fonte','dsc_acao_governo','vlr_investimento','vlr_repasse','vlr_contrapartida','vlr_empenhado','vlr_desembolsado','vlr_desbloqueado','vlr_pago','vlr_a_empenhar','vlr_a_desembolsar','vlr_a_executar_financ','vlr_a_pagar','vlr_taxa_adm','prc_desembolsado','prc_execucao_financ','prc_execucao_fisica','txt_link','dte_carga','bln_emenda','num_emendas','qtd_emendas','qtd_uh','qtd_entregues','qtd_uh_distratadas','qtd_vigentes','dsc_situacao_atual','dte_atualizacao_situacao_atual','dsc_modalidade_aplicacao']]

```

```{python}
#| echo: false
#| label: Definindo a data de hoje
from datetime import datetime
```
:::{.callout-tip title="Data de atualização" collapse="false"}
Atualizado em: `{python} datetime.today().strftime('%d/%m/%Y')`
:::



::: content-block
```{python}
#| echo: false
#| label: Gerando a tabela
import itables.options as opt
from itables import init_notebook_mode, show
from itables.downsample import as_nbytes, nbytes
from itables.sample_dfs import get_indicators
from itables import JavascriptCode
from datetime import datetime
import locale

# Definir o local para o Brasil
locale.setlocale(locale.LC_NUMERIC, 'pt_BR.UTF-8')

init_notebook_mode(all_interactive=True)

#opt.column_filters = 'footer'
#opt.columnDefs = [{"className": "dt-center", "targets": "_all"}]
opt.showIndex = False
opt.lengthMenu = [ 20, 50, 100, 200, 500]
opt.maxBytes = "5MB"


# Obtém a data de hoje no formato desejado
data_hoje = datetime.today().strftime('%Y%m%d')

# Exibir com o símbolo de porcentagem
#df['Execução (%)'] = df['Execução (%)'].apply(lambda x: f"{x:.2f}%")

# Lista de colunas a serem processadas
colunas_monetarias = ['vlr_investimento','vlr_repasse','vlr_contrapartida','vlr_empenhado','vlr_desembolsado','vlr_desbloqueado','vlr_pago','vlr_a_empenhar','vlr_a_desembolsar','vlr_a_executar_financ','vlr_a_pagar','vlr_taxa_adm','prc_desembolsado','prc_execucao_financ','prc_execucao_fisica']

#df['municipio'] = df['txt_municipio'].str.title()

# Limpar e converter as colunas
#df[colunas_monetarias] = df[colunas_monetarias].apply(clean_and_convert)

# Formatar os valores monetários e de porcentagem com 2 casas decimais
df[colunas_monetarias] = df[colunas_monetarias].map(lambda x: f"{x:,.2f}" if pd.notnull(x) else "")

# Passo 1: Substituir vírgulas por pontos e converter para numérico
#df['Execução (%)'] = df['Execução (%)'].str.replace(',', '.', regex=False)
#df['Execução (%)'] = pd.to_numeric(df['Execução (%)'], errors='coerce')

# Passo 2: Multiplicar por 100
#df['Execução (%)'] = df['Execução (%)'] * 100


# Ordena o DataFrame por 'coluna1' e 'coluna2'
df = df.sort_values(by=[ 'txt_uf','txt_municipio','cod_contrato'])

df = df.reset_index(drop=True)

# Renomear uma coluna
#df.rename(columns={"Unidade Federativa": "UF"}, inplace=True)

# Transformar a coluna 'cod_contrato' em string
#df['cod_contrato'] = df['cod_contrato'].astype(str)

show(
    df,  # Exibe o DataFrame 'df' utilizando a função 'show' para renderização interativa na interface.
    #footer=True,  # A linha de rodapé (footer) está comentada, mas se fosse ativada, exibiria informações adicionais no rodapé da tabela.
    classes="display nowrap cell-border",  # Define classes CSS para estilização da tabela: 'display' para exibição padrão, 'nowrap' para evitar quebra de linha nas células e 'cell-border' para adicionar bordas nas células.
    language={"url": "https://cdn.datatables.net/plug-ins/2.0.2/i18n/pt-BR.json"},  # Define o idioma da tabela como português do Brasil, utilizando um arquivo de tradução hospedado online.
    select=True,  # Habilita a seleção de linhas na tabela.
    keys=True,  # Permite a navegação entre as linhas utilizando teclas de direção do teclado.
    buttons=[  # Define os botões adicionais na interface da tabela.
        "pageLength",  # Adiciona o botão de seleção de quantidade de páginas (número de registros exibidos por página).
        {
            "extend": "colvis",  # Botão de visibilidade das colunas.
            "collectionLayout": "fixed columns",  # Layout do menu de visibilidade das colunas será fixo (não se move).
            "popoverTitle": "Quais colunas você quer que apareça?"  # Título do popover que aparece quando o botão de visibilidade é acionado.
        },
        {
            "extend": "excelHtml5",  # Botão para exportar os dados da tabela para um arquivo Excel.
            "title": f"{data_hoje}_base_semob",  # O nome do arquivo exportado será composto pela data atual e o prefixo 'base_semob'.
            "exportOptions": {"columns": ":visible"}  # Apenas as colunas visíveis serão exportadas para o Excel.
        }
    ],
    layout={"top1": "searchPanes"},  # Define o layout da tabela, no qual a área de pesquisa ('searchPanes') será posicionada na parte superior.
    searchPanes={"layout": "columns-4", "cascadePanes": True, "columns": [ 11, 15, 16, 34]
    },  # Configura o painel de pesquisa para ser exibido em 4 colunas, permitindo que os filtros sejam aplicados de forma cascata nas colunas 1, 2, 4 e 9.
    columnDefs=[  # Define propriedades específicas para as colunas da tabela.
        #{"targets": 5, "title": "Valor Repasse/<br>Empréstimo"},  # Altera o título da coluna 5, com a adição de uma quebra de linha HTML no título.
        {"targets": 17, "visible": False},  # Torna a coluna 3 invisível.
        {"width": "100px", "targets": "_all"},  # Define a largura de todas as colunas como 100px.
        {"className": "dt-center", "targets": [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]},  # Aplica a classe CSS 'dt-center' para centralizar o conteúdo das colunas 0, 1, 2, 4 e 9.
        #{"className": "dt-left", "targets": [3]},  # Aplica a classe CSS 'dt-left' para alinhar à esquerda o conteúdo da coluna 3.
        #{"className": "dt-right", "targets": [5,6,7,8,10]}  # Aplica a classe CSS 'dt-right' para alinhar à direita o conteúdo das colunas 5, 6, 7, 8 e 10.
    ],
    style="width:900px",  # Define o estilo de largura para a tabela, ajustando a largura total para 900px.
    autoWidth=False  # Desativa a largura automática das colunas, permitindo que a largura de cada coluna seja definida manualmente.
)



```

:::